// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"
	"runtime"

	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/bbcyyb/bunkerhill/config"
	"github.com/bbcyyb/bunkerhill/logs"
	logger "github.com/bbcyyb/bunkerhill/logs/simple"
	"github.com/bbcyyb/bunkerhill/restapi"
	"github.com/bbcyyb/bunkerhill/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	adapter := config.NewAdapter()
	// env is high priority
	adapter.Register("ini", "config/config.ini")
	adapter.Register("env", "")
	if adapter.GetValue("MODE") == "dev" {
		logger.SetLevel(logs.LevelDebug)
	} else {
		logger.SetLevel(logs.LevelInfo)
	}
	logger.Info("Start bunkerhill-server ....")

	logo := `
* * * * * * * * * * * * * * * * * * * * * * * * * *
*  ______             _             _   _ _ _ _   *
*  | ___ \           | |           | | | (_) | |  *
*  | |_/ /_   _ _ __ | | _____ _ __| |_| |_| | |  *
*  | ___ \ | | | '_ \| |/ / _ \ '__|  _  | | | |  *
*  | |_/ / |_| | | | |   <  __/ |  | | | | | | |  *
*  \____/ \__,_|_| |_|_|\_\___|_|  \_| |_/_|_|_|  *
*                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * *

	`

	logoDev := `
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  ______             _             _   _ _ _ _    ______             *
*  | ___ \           | |           | | | (_) | |   |  _  \            *
*  | |_/ /_   _ _ __ | | _____ _ __| |_| |_| | |   | | | |_____   __  *
*  | ___ \ | | | '_ \| |/ / _ \ '__|  _  | | | |   | | | / _ \ \ / /  *
*  | |_/ / |_| | | | |   <  __/ |  | | | | | | |   | |/ /  __/\ V /   *
*  \____/ \__,_|_| |_|_|\_\___|_|  \_| |_/_|_|_|   |___/ \___| \_/    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	`

	if adapter.GetValue("MODE") == "dev" {
		logger.Info(logoDev)
	} else {
		logger.Info(logo)
	}
	logger.Info("** OS: %s, Architecture: %s", runtime.GOOS, runtime.GOARCH)

	logger.Info("Available variables as following:")
	for _, m := range adapter.Review() {
		logger.Debug("** %s", m)
	}

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewBunkerhillAPI(swaggerSpec)
	api.Logger = func(f string, v ...interface{}) { logger.Info(f, v...) }
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Bunker Hill"
	parser.LongDescription = swaggerSpec.Spec().Info.Description

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
