// Code generated by go-swagger; DO NOT EDIT.

package blog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBlogsParams creates a new GetBlogsParams object
// no default values defined in spec.
func NewGetBlogsParams() GetBlogsParams {

	return GetBlogsParams{}
}

// GetBlogsParams contains all the bound params for the get blogs operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetBlogs
type GetBlogsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	AuthorID *string
	/*
	  In: query
	*/
	Page *int32
	/*
	  In: query
	*/
	PrePage *int32
	/*e.g. select=title,id,body,body_html
	  In: query
	*/
	Select *string
	/*e.g. sortby=+title,-timestamp
	  In: query
	*/
	Sortby *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetBlogsParams() beforehand.
func (o *GetBlogsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAuthorID, qhkAuthorID, _ := qs.GetOK("author_id")
	if err := o.bindAuthorID(qAuthorID, qhkAuthorID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPrePage, qhkPrePage, _ := qs.GetOK("pre_page")
	if err := o.bindPrePage(qPrePage, qhkPrePage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSelect, qhkSelect, _ := qs.GetOK("select")
	if err := o.bindSelect(qSelect, qhkSelect, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortby, qhkSortby, _ := qs.GetOK("sortby")
	if err := o.bindSortby(qSortby, qhkSortby, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlogsParams) bindAuthorID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.AuthorID = &raw

	return nil
}

func (o *GetBlogsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int32", raw)
	}
	o.Page = &value

	return nil
}

func (o *GetBlogsParams) bindPrePage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("pre_page", "query", "int32", raw)
	}
	o.PrePage = &value

	return nil
}

func (o *GetBlogsParams) bindSelect(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Select = &raw

	return nil
}

func (o *GetBlogsParams) bindSortby(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Sortby = &raw

	return nil
}
